package de.weinbock.persistence.dto;

import java.util.Random;

import javax.jdo.annotations.Discriminator;
import javax.jdo.annotations.DiscriminatorStrategy;
import javax.jdo.annotations.Index;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.validation.constraints.NotNull;

import org.restnucleus.dao.Model;

import com.fasterxml.jackson.annotation.JsonIgnore;

@PersistenceCapable
@Discriminator(strategy = DiscriminatorStrategy.CLASS_NAME)
public class Account extends Model {
	private static final long serialVersionUID = -792538125194459327L;

	// the id generated by the authentication api
	@Persistent
	@Index
	@NotNull
	private String userToken;
	
	// the id in the network itself, in case we have to switch authentication
	// providers
	@Persistent
	@Index
	@NotNull
	private String networkId;

	// the name of the network the user came from
	@Persistent
	@Index
	@NotNull
	private String network;

	
	// the name
	@Persistent
	@NotNull
	private String firstName;

	// the name
	@Persistent
	@NotNull
	private String lastName;

	// the email
	// only exposed when emailSecret is null
	@Persistent
	private String email;

	// the email secret which needs to be returned before email becomes visible
	@Index
	@Persistent
	private String emailSecret;

	// the picture
	@Persistent
	private String picture;

	@Persistent
	private String locale;

	@Persistent
	private Long registrationTime;

	@Persistent
	@Index
	private Long lastLogin;
	
	// determine if the user wan't to receive email
	@Persistent
	private Boolean receiveEmail;

	public Account() {
		super();
		registrationTime = System.currentTimeMillis();
	}
	
	@JsonIgnore
	public boolean isComplete(){
		boolean rv = true;
		if (null==userToken || ""==userToken)
			rv = false;
		if (null==networkId || ""==networkId)
			rv = false;
		if (null==firstName || ""==firstName)
			rv = false;
		if (null==lastName || ""==lastName)
			rv = false;
		if (null==locale || ""==locale)
			rv = false;
		if (null==email || ""==email)
			rv = false;
		return rv;
	}

	public String getUserToken() {
		return userToken;
	}

	public Account setUserToken(String userToken) {
		this.userToken = userToken;
		return this;
	}

	public String getNetworkId() {
		return networkId;
	}

	public Account setNetworkId(String networkId) {
		this.networkId = networkId;
		return this;
	}

	public String getNetwork() {
		return network;
	}

	public Account setNetwork(String network) {
		this.network = network;
		return this;
	}
	
	public String getPicture() {
		return picture;
	}

	public Account setPicture(String picture) {
		this.picture = picture;
		return this;
	}

	public String getFirstName() {
		return firstName;
	}

	public Account setFirstName(String firstName) {
		this.firstName = firstName;
		return this;
	}

	public String getLastName() {
		return lastName;
	}

	public Account setLastName(String lastName) {
		this.lastName = lastName;
		return this;
	}

	public String getEmail() {
			return email;
	}

	public Account setEmail(String email) {
		this.email = email;
		return this;
	}

	public void createEmailSecret() {
		Random rand = new Random();
		emailSecret = String.valueOf(rand.nextInt());
	}

	public String getEmailSecret() {
		return emailSecret;
	}

	public Account setEmailSecret(String emailSecret) {
		this.emailSecret = emailSecret;
		return this;
	}

	public String getLocale() {
		return locale;
	}

	public Account setLocale(String locale) {
		this.locale = locale;
		return this;
	}

	public Long getRegistrationTime() {
		return registrationTime;
	}

	public Account setRegistrationTime(Long registrationTime) {
		this.registrationTime = registrationTime;
		return this;
	}

	public Long getLastLogin() {
		return lastLogin;
	}

	public Account setLastLogin(Long lastLogin) {
		this.lastLogin = lastLogin;
		return this;
	}

	public Boolean getReceiveEmail() {
		return receiveEmail;
	}

	public void setReceiveEmail(Boolean receiveEmail) {
		this.receiveEmail = receiveEmail;
	}
	
	public void update(Model newInstance) {
		Account n = (Account) newInstance;
		if (null != n.getUserToken())this.setUserToken(n.getUserToken());
		if (null != n.getNetworkId())this.setNetworkId(n.getNetworkId());
		if (null != n.getNetwork())this.setNetwork(n.getNetwork());
		if (null != n.getEmail() && !n.getEmail().equalsIgnoreCase(this.getEmail())){
			this.setEmail(n.getEmail());
			this.createEmailSecret();
		};
		if (null != n.getFirstName())this.setFirstName(n.getFirstName());
		if (null != n.getLastName())this.setLastName(n.getLastName());
		if (null != n.getPicture())this.setPicture(n.getPicture());
		if (null != n.getLocale())this.setLocale(n.getLocale());
		if (null != n.getLastLogin())this.setLastLogin(n.getLastLogin());
		//this is removed, as email secrets should not be updatable by client side
		//if (null != n.getEmailSecret())this.setEmailSecret(n.getEmailSecret());
		if (null != n.getReceiveEmail())this.setReceiveEmail(n.getReceiveEmail());
	}


}
